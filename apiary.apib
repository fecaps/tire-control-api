FORMAT: 1A

# Tire Control

**Tire Control** is an API allowing companies/entities to maintain data on the logistics cycle involving tires and vehicles.

## Token

Most endpoints in the Tire Control API will require the `token` HTTP header. 
Only `/signup` and `/login` endpoinst will not require this HTTP header. 

```http
token: <token>
```
Failing to do so will cause the following error:

```json
{
  "error": "Token is missing on request headers."
}
```

# Group Users

Resources related to users in the API.

## Signup Collection [/signup]

### Create a New User [POST]

You **must** create an user using this action. It takes a JSON object
containing only specific fields.

+ name (string) - The user name
+ username (sring) - The username (login) identification
+ email (string) - The user email
+ passwd (string) - The user password

+ Request

    + Headers
    
            Content-Type: application/json
    
    + Body

            {
                "name": "User Name",
                "username": "user_name",
                "email": "user_email@gmail.com",
                "passwd": "12345678"
            }

+ Response 201 (application/json)

    + Body

            {
                "id": "1",
                "name": "User Name",
                "email": "user_email@gmail.com",
                "username": "user_name"
            }

+ Response 401 (application/json)

    + Body

            {
                "error": "",
                "errors": {
                    "name": [
                        "This field cannot be blank"
                    ],
                    "username": [
                        "This field cannot be blank"
                    ],
                    "email": [
                        "This field cannot be blank"
                    ],
                    "passwd": [
                        "This field cannot be blank"
                    ]
                }
            }

## Login Collection [/login]

### Login an User [POST]

You **must** login an user using this action. It takes a JSON object
containing only specific fields.

+ email (string) - The user email
+ passwd (string) - The user password

+ Request

    + Headers
    
            Content-Type: application/json
    
    + Body

            {
                "email": "user_email@gmail.com",
                "passwd": "12345678"
            }

+ Response 201 (application/json)

    + Body

            {
                "user_name": "User Name",
                "user_email": "user_email@gmail.com",
                "token": "MTU4ZTdmYzNjMzg0OWI2LjQ5ODk5NTc2"
            }

+ Response 401 (application/json)

    + Body

            {
                "error": "Invalid email or password.",
                "errors": []
            }

## Logout Collection [/logout]

### Logout an User [PUT]

You **must** logout an user using this action. It takes just the token header.

+ Request

    + Headers
    
            token: <token>
    
+ Response 204

# Group Tires

Resources related to tires in the API.

## Tire Brands Collection [/tires/brands]

### List All Tire Brands [GET]

+ Request

    + Headers

            token: <token>


+ Response 200 (application/json)

        {
            "data": [
                {
                    "id": "1",
                    "name": "Pirelli"
                },
                {
                    "id": "2",
                    "name": "Continental"
                }
            ]
        }

### Create a New Tire Brand [POST]

You **must** create a tire brand using this action. It takes a JSON object
containing only one field.

+ name (string) - The tire brand name

+ Request

    + Headers
    
            token: <token>
            Content-Type: application/json
    
    + Body

            {
                "name": "Pirelli"
            }

+ Response 201 (application/json)

    + Body

            {
                "id": "1",
                "name": "Pirelli"
            }

+ Response 401 (application/json)

    + Body

            {
                "error": "This tire brand name already exists.",
                "errors": []
            }

## Tire Models Collection [/tires/models]

### List All Tire Models [GET]

+ Request

    + Headers

            token: <token>


+ Response 200 (application/json)

        {
            "data": [
                {
                    "id": "1",
                    "name": "Radial"
                }
            ]
        }

### Create a New Tire Model [POST]

You **must** create a tire model using this action. It takes a JSON object
containing only one field.

+ name (string) - The tire model name

+ Request

    + Headers
    
            token: <token>
            Content-Type: application/json
    
    + Body

            {
                "name": "Radial"
            }

+ Response 201 (application/json)

    + Body

            {
                "id": "1",
                "name": "Radial"
            }

+ Response 401 (application/json)

    + Body

            {
                "error": "This tire model name already exists.",
                "errors": []
            }

## Tire Sizes Collection [/tires/sizes]

### List All Tire Sizes [GET]

+ Request

    + Headers

            token: <token>


+ Response 200 (application/json)

        {
            "data": [
                {
                    "id": "1",
                    "name": "295/80"
                },
                {
                    "id": "2",
                    "name": "295/90"
                }
            ]
        }

### Create a New Tire Size [POST]

You **must** create a tire size using this action. It takes a JSON object
containing only one field.

+ name (string) - The tire size name

+ Request

    + Headers
    
            token: <token>
            Content-Type: application/json
    
    + Body

            {
                "name": "295/90"
            }

+ Response 201 (application/json)

    + Body

            {
                "id": "2",
                "name": "295/90"
            }

+ Response 401 (application/json)

    + Body

            {
                "error": "This tire size name already exists.",
                "errors": []
            }

## Tire Types Collection [/tires/types]

### List All Tire Types [GET]

+ Request

    + Headers

            token: <token>


+ Response 200 (application/json)

        {
            "data": [
                {
                    "id": "1",
                    "name": "FR85"
                },
                {
                    "id": "2",
                    "name": "FR90"
                }
            ]
        }

### Create a New Tire Type [POST]

You **must** create a tire type using this action. It takes a JSON object
containing only one field.

+ name (string) - The tire type name

+ Request

    + Headers
    
            token: <token>
            Content-Type: application/json
    
    + Body

            {
                "name": "FR90"
            }

+ Response 201 (application/json)

    + Body

            {
                "id": "2",
                "name": "FR90"
            }

+ Response 401 (application/json)

    + Body

            {
                "error": "This tire type name already exists.",
                "errors": []
            }

## Tires Collection [/tires]

### List All Tires [GET]

+ Request

    + Headers

            token: <token>


+ Response 200 (application/json)

        {
            "data": [
                {
                    "id": "1",
                    "brand": "Pirelli",
                    "size": "295/80",
                    "type": "FR85",
                    "model": "Radial",
                    "dot": "1209",
                    "code": "code11"
                },
                {
                    "id": "2",
                    "brand": "Pirelli",
                    "size": "295/80",
                    "type": "FR85",
                    "model": "Radial",
                    "dot": "1210",
                    "code": "code10"
                }
            ]
        }

### Create a New Tire [POST]

You **must** create a tire using this action. It takes a JSON object
containing specific fields.

+ brand (string) - The brand
+ model (string) - The model
+ size (string) - The size
+ type (string) - The type
+ dot (string) - The DOT (MonthYear)
+ code (string) - The unique code

+ Request

    + Headers
    
            token: <token>
            Content-Type: application/json
    
    + Body

            {
                "brand": "Pirelli",
                "model": "Radial",
                "size": "295/80",
                "type": "FR85",
                "dot": "1215",
                "code": "code10"
            }

+ Response 201 (application/json)

    + Body

            {
                "id": "1",
                "brand": "Pirelli",
                "model": "Radial",
                "size": "295/80",
                "type": "FR85",
                "dot": "1215",
                "code": "code10"
            }

+ Response 401 (application/json)

    + Body

            {
                "error": "",
                "errors": {
                    "code": [
                        "Code already in use."
                    ]
                }
            }

# Group Vehicles

Resources related to vehicles in the API.

## Vehicle Brands Collection [/vehicles/brands]

### List All Vehicle Brands [GET]

+ Request

    + Headers

            token: <token>


+ Response 200 (application/json)

        {
            "data": [
                {
                    "id": "1",
                    "name": "Ford"
                },
                {
                    "id": "2",
                    "name": "VW"
                }
            ]
        }

### Create a New Vehicle Brand [POST]

You **must** create a vehicle brand using this action. It takes a JSON object
containing only one field.

+ name (string) - The vehicle brand name

+ Request

    + Headers
    
            token: <token>
            Content-Type: application/json
    
    + Body

            {
                "name": "VW"
            }

+ Response 201 (application/json)

    + Body

            {
                "id": "2",
                "name": "VW"
            }

+ Response 401 (application/json)

    + Body

            {
                "error": "This vehicle brand name already exists.",
                "errors": []
            }

## Vehicle Categories Collection [/vehicles/categories]

### List All Vehicle Categories [GET]

+ Request

    + Headers

            token: <token>


+ Response 200 (application/json)

        {
            "data": [
                {
                    "id": "1",
                    "name": "Utilitary"
                },
                {
                    "id": "2",
                    "name": "2 axes"
                }
            ]
        }

### Create a New Vehicle Category [POST]

You **must** create a vehicle category using this action. It takes a JSON object
containing only one field.

+ name (string) - The vehicle category name

+ Request

    + Headers
    
            token: <token>
            Content-Type: application/json
    
    + Body

            {
                "name": "2 axes"
            }

+ Response 201 (application/json)

    + Body

            {
                "id": "2",
                "name": "2 axes"
            }

+ Response 401 (application/json)

    + Body

            {
                "error": "This vehicle category name already exists.",
                "errors": []
            }

## Vehicle Models Collection [/vehicles/models]

### List All Vehicle Models [GET]

+ Request

    + Headers

            token: <token>


+ Response 200 (application/json)

        {
            "data": [
                {
                    "id": "1",
                    "brand": "Ford",
                    "model": "Model10"
                },
                {
                    "id": "2",
                    "brand": "Ford",
                    "model": "Model20"
                }
            ]
        }

### Create a New Vehicle Model [POST]

You **must** create a vehicle model using this action. It takes a JSON object
containing only two fields.

+ brand (string) - The vehicle brand name (from vehicle brand)
+ model (string) - The vehicle model name

+ Request

    + Headers
    
            token: <token>
            Content-Type: application/json
    
    + Body

            {
                "brand": "Ford",
                "model": "Model20"
            }

+ Response 201 (application/json)

    + Body

            {
                "id": "2",
                "brand": "Ford",
                "model": "Model20"
            }

+ Response 401 (application/json)

    + Body

            {
                "error": "",
                "errors": {
                    "model": [
                        "This vehicle model already exists."
                    ]
                }
            }

## Vehicle Types Collection [/vehicles/types]

### List All Vehicle Types [GET]

+ Request

    + Headers

            token: <token>


+ Response 200 (application/json)

        {
            "data": [
                {
                    "id": "1",
                    "name": "Truck"
                },
                {
                    "id": "2",
                    "name": "HR"
                }
            ]
        }

### Create a New Vehicle Type [POST]

You **must** create a vehicle type using this action. It takes a JSON object
containing only one field.

+ name (string) - The vehicle type name

+ Request

    + Headers
    
            token: <token>
            Content-Type: application/json
    
    + Body

            {
                "name": "HR"
            }

+ Response 201 (application/json)

    + Body

            {
                "id": "2",
                "name": "HR"
            }

+ Response 401 (application/json)

    + Body

            {
                "error": "This vehicle type name already exists.",
                "errors": []
            }

## Vehicles Collection [/vehicles]

### List All Vehicles [GET]

+ Request

    + Headers

            token: <token>


+ Response 200 (application/json)

        {
            "data": [
                {
                    "id": "1",
                    "brand": "Ford",
                    "category": "Utilitary",
                    "model": "Model1",
                    "type": "Truck",
                    "plate": "PLT687"
                }
            ]
        }

### Create a New Vehicle [POST]

You **must** create a vehicle type using this action. It takes a JSON object
containing specific fields.

+ brand (string) - The vehicle brand name
+ category (string) - The vehicle category name
+ model (string) - The vehicle model name
+ type (string) - The vehicle type name
+ plate (string) - The vehicle plate

+ Request

    + Headers
    
            token: <token>
            Content-Type: application/json
    
    + Body

            {
                "brand": "Ford",
                "category": "Utilitary",
                "model": "Model1",
                "type": "Truck",
                "plate": "PLT687"
            }

+ Response 201 (application/json)

    + Body

            {
                "id": "1",
                "brand": "Ford",
                "category": "Utilitary",
                "model": "Model1",
                "type": "Truck",
                "plate": "PLT687"
            }

+ Response 401 (application/json)

    + Body

            {
                "error": "",
                "errors": {
                    "plate": [
                        "Invalid vehicle plate"
                    ]
                }
            }